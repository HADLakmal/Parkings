

{{> header}}

<h1>{{register}}</h1>
<p> Register using the form below </p>
<link rel='stylesheet' href='/stylesheets/style.css' />
<link rel='stylesheet' href='/stylesheets/bootstrap.css' />
<form  method="post" action="/users/registerpark" >
    <div class="form-group">
        <label> Name </label>
        <input class="form-control" name="name" type="text" placeholder="Enter your Name">
    </div>
    <div class="form-group">
        <label> Email </label>
        <input  class="form-control" name="email" type="email" placeholder="Enter your email" required>
    </div>
    <div class="addressControl">
        <label> Address </label>
        <input id="address" class="form-control" name="address" type="text" placeholder="Search Box" required>
        <div id="map"></div>
    </div>
    <div class="form-group">
        <label>NIC Number  </label>
        <input  class="form-control"  id="nic" name="nic" type="text" placeholder="Enter your NIC" onchange="validateNIC()" required>
    </div>
    <div class="form-group">
        <label>Mobile Number </label>
        <input  class="form-control"  id="number" name="number" type="text" placeholder="Enter your mobile number" onchange="validateNumber()" required>
    </div>
    <div class="form-group">
        <label>Price Of Ordering Car Parking Slot </label>
        <input  class="form-control"  id="price" name="price" type="text" placeholder="Ordering available Enter the Price" >
    </div>
    <div class="form-group">
        <label>Image</label>
        <input  class="form-control"  id="image" name="image" type="test" placeholder="Place your CarPark Image URL here"  >
    </div>
    <div class="form-group">
            <label>Capacity of your car park </label>
            <input  class="form-control"  id="capacity" name="capacity" type="text" placeholder="Enter the number of vehicle can park" >
        </div>
    <div class="form-group col-lg-12">
            <div class="col-lg-4">
                <label> Open Time </label>
                <select class="form-control" id="open" name="open" required>
                    <option value="0">00:00</option>
                    <option value="1">01:00</option>
                    <option value="2">02:00</option>
                    <option value="3">03:00</option>
                    <option value="4">04:00</option>
                    <option value="5">05:00</option>
                    <option value="6">06:00</option>
                    <option value="7">07:00</option>
                    <option value="8">08:00</option>
                    <option value="9">09:00</option>
                    <option value="10">10:00</option>
                    <option value="11">11:00</option>
                    <option value="12">12:00</option>
                    <option value="13">13:00</option>
                    <option value="14">14:00</option>
                    <option value="15">15:00</option>
                    <option value="16">16:00</option>
                    <option value="17">17:00</option>
                    <option value="18">18:00</option>
                    <option value="19">19:00</option>
                    <option value="20">20:00</option>
                    <option value="21">21:00</option>
                    <option value="22">22:00</option>
                    <option value="23">23:00</option>
                </select>
            </div>
            <div class="col-lg-4">
                <label> Closed Time </label>
                <select class="form-control" id="close" name="close" onchange="validateTime()" required>
                    <option value="0">00:00</option>
                    <option value="1">01:00</option>
                    <option value="2">02:00</option>
                    <option value="3">03:00</option>
                    <option value="4">04:00</option>
                    <option value="5">05:00</option>
                    <option value="6">06:00</option>
                    <option value="7">07:00</option>
                    <option value="8">08:00</option>
                    <option value="9">09:00</option>
                    <option value="10">10:00</option>
                    <option value="11">11:00</option>
                    <option value="12">12:00</option>
                    <option value="13">13:00</option>
                    <option value="14">14:00</option>
                    <option value="15">15:00</option>
                    <option value="16">16:00</option>
                    <option value="17">17:00</option>
                    <option value="18">18:00</option>
                    <option value="19">19:00</option>
                    <option value="20">20:00</option>
                    <option value="21">21:00</option>
                    <option value="22">22:00</option>
                    <option value="23">23:00</option>
                </select>
            </div>
        </div>
    <div class="form-group">
        <label> Password </label>
        <input class="form-control" id="inputPassword" name="password" type="password" placeholder="Enter your pasword" required>
    </div>
    <div class="form-group">
        <label> Confirm your password </label>
        <input class="form-control" id="inputPassword2" name="password2" type="password" placeholder="Confirm password" onchange="validatePassword()" required>
    </div>

    <input class="form-control" name="submit" type="submit" value="register">

</form>
<script type="text/javascript">
    function validatePassword() {

        if (document.getElementById("inputPassword").value != document.getElementById("inputPassword2").value  && document.getElementById("inputPassword2").value != ''  && document.getElementById("inputPassword").value != '') {

            window.alert("Passwords Dont Match");
            // pw2.setCustomValidity("Passwords Don't Match");
            // return false;
        }

    }
    function validateNIC() {
        var nic = document.getElementById("nic").value;
        if(nic.length==9){
            if(isNaN(nic)){
                window.alert("Enter only the numbers");
            }
            else{
                nic.innerHTML = nic+"v";
            }
        }else {
            window.alert("Enter the correct nic number");
        }

    }
    function validateNumber() {
        var number = document.getElementById("number").value;
        if(number.length==10){
            if(isNaN(number)){
                window.alert("Enter only the numbers");
            }
        }
        else{
            window.alert("Enter the number begining with 07...")
        }
    }

    function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 6.79079200000000, lng: 79.9002103},
            zoom: 13,
            mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('address');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach(function(marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function(place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });
    }
    function validateTime() {
            var start = document.getElementById("start").value;
            var end = document.getElementById("end").value;
            console.log(start+" "+end);
            if(start>=end){
                window.alert("Select correct time range")
            }
        }

</script>
<style>
    #map {
        height: 250px;
    }

    #infowindow-content .title {
    font-weight: bold;
    }

    #infowindow-content {
    display: none;
    }

    #map #infowindow-content {
    display: inline;
    }

    .pac-card {
    margin: 10px 10px 0 0;
    border-radius: 2px 0 0 2px;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    outline: none;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    background-color: #fff;
    font-family: Roboto;
    }

    #pac-container {
    padding-bottom: 12px;
    margin-right: 12px;
    }

    .pac-controls {
    display: inline-block;
    padding: 5px 11px;
    }

    .pac-controls label {
    font-family: Roboto;
    font-size: 13px;
    font-weight: 300;
    }

    #address {
    background-color: #fff;
    font-family: Roboto;
    font-size: 15px;
    font-weight: 300;
    margin-left: 12px;
    padding: 0 11px 0 13px;
    text-overflow: ellipsis;
    width: 400px;
    }

    #address:focus {
    border-color: #4d90fe;
    }
    .addressControl {
        height: 300px;
        margin: 0;
        padding: 0;
    }

</style>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCmDyfNoVy0qigSbK-Cp2PifbE_vyOyDGY&libraries=places&callback=initAutocomplete"
        async defer></script>

